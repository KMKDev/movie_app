{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","id","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRA+BeA,MA1Bf,YAAwD,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC3C,OAAO,sBAAKC,UAAU,QAAf,UACK,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACzC,sBAAKI,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SACKD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,oBAAgBL,UAAU,gBAA1B,SAA2CI,GAAlCC,QAGjB,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gBCyEDC,G,kNAjDbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EAEVC,U,sBAAY,8BAAAC,EAAA,sEAC8BC,IAAMC,IAAI,4DADxC,gBACYJ,EADZ,EACHK,KAAQA,KAAOL,OAItB,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IALzB,2C,kEAaVQ,KAAKN,c,+BAGG,IAAD,EACuBM,KAAKT,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACnB,OACE,yBAASV,UAAU,YAAnB,SACGS,EACC,qBAAKT,UAAU,SAAf,SACE,sBAAMA,UAAU,eAAhB,0BAGH,qBAAKA,UAAU,SAAf,SACGU,EAAOP,KAAI,SAAAe,GAAK,OAEpB,aAF0B,CAEzB,EAAD,CAEEC,GAAID,EAAMC,GACVxB,KAAMuB,EAAMvB,KACZC,MAAOsB,EAAMtB,MACbC,QAASqB,EAAMrB,QACfC,OAAQoB,EAAME,mBACdrB,OAAQmB,EAAMnB,QANTmB,EAAMC,e,GAlCHE,IAAMC,YClCxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.a6f963c8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\n//Movie Component의 정의\r\nfunction Movie({ year, title, summary, poster, genres}){ //받을 props 정의\r\n    return <div className=\"movie\">\r\n                <img src={poster} alt={title} title={title} />\r\n            <div className=\"movie__data\">\r\n                <h3 className=\"movie__title\">{title}</h3>\r\n                <h5 className=\"movie__year\">{year}</h5>\r\n                <ul className=\"movie__genres\">\r\n                    {genres.map((genre, index) =>(\r\n                        <li key={index} className=\"genres__genre\">{genre}</li>\r\n                    ))}\r\n                </ul>\r\n                <p className=\"movie__summary\">{summary.slice(0, 140)}...</p>\r\n            </div>\r\n        </div>;\r\n}\r\n\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\n\r\nexport default Movie;","//import React, {useState, useEffect} from \"react\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\n// function App() {\n\n//   // let [isLoading, changeIsLoading] = useState(true);\n//   // let [movies, changeMovies] = useState([]);\n\n//   let [movies_isLoading, changeMovies_isLoading] = useState([[],true]);\n  \n//   useEffect(() => {\n//     async function getMovies() {\n//     const {data:{data:{movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n//     changeMovies_isLoading([movies,false]);\n//     }\n//     getMovies();\n    \n//   },[]);\n//   console.log(movies_isLoading);\n//     return (\n//       <div>\n//         {movies_isLoading[1] ? \"Loading...\" : movies_isLoading[0].map(movie => ( //map함수는 movies 안의 모든 object에 대해\n//                                                           //단수 object를 movie라고 두고, 아래 명령을 실행\n//         <Movie \n//           key={movie.id}\n//           id={movie.id} \n//           year={movie.year} \n//           title={movie.title} \n//           summary={movie.summary} \n//           poster={movie.medium_cover_image} \n//         /> //Movie라는 Component에 props를 넘겨줌\n//         ))}\n//       </div>\n//     );\n// }\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: []\n  };\n  getMovies = async () => { //화살표 함수 문법에 aync를 포함하여 동시에 진행되지 않을 수 있으므로 기다리라는 신호\n    const {data: { data :{movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n    //{data: {data: {movies}}} <- 요것은 검사를 해봤을 때 data.data.movies로 받아와서 그것을 표현해 준것\n    //axios는 data fetching을 위한 라이브러리\n    //url은 nomadcoder API. 설명서는 해당 사이트에 있음\n    this.setState({ movies, isLoading: false }) //setState는 state를 업데이트(?)해 줌 (비동기적으로)\n  \n    \n  }\n  //App Component가 mount 되었을 때 실행되는 함수(이건 React 내에서 default임)\n  //getMovies라는 함수를 실행\n  componentDidMount(){\n    \n    this.getMovies(); //this는 method를 호출한 object를 가리킴. 여기서는 App(상황따라 다르니 다시 확인할것)\n    \n  }\n  render() {\n    const { isLoading, movies } = this.state; //state에서 가져와서 상수로 사용하기\n    return (\n      <section className=\"container\">\n        {isLoading ? (\n          <div className=\"loader\">\n            <span className=\"loader__text\">Loading...</span>\n          </div>\n        ) : (\n         <div className=\"movies\">\n           {movies.map(movie => ( //map함수는 movies 안의 모든 object에 대해\n                              //단수 object를 movie라고 두고, 아래 명령을 실행\n        <Movie \n          key={movie.id}\n          id={movie.id} \n          year={movie.year} \n          title={movie.title} \n          summary={movie.summary} \n          poster={movie.medium_cover_image} \n          genres={movie.genres}\n        /> //Movie라는 Component에 props를 넘겨줌\n        ))}\n        </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}